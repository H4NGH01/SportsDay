package org.macausmp.sportsday.event;

import net.kyori.adventure.key.Key;
import net.kyori.adventure.sound.Sound;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.ComponentLike;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.title.TitlePart;
import org.bukkit.*;
import org.bukkit.attribute.Attribute;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.ItemFrame;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.MapMeta;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.macausmp.sportsday.ContestantData;
import org.macausmp.sportsday.SportsDay;
import org.macausmp.sportsday.customize.GraffitiSpray;
import org.macausmp.sportsday.customize.Musickit;
import org.macausmp.sportsday.customize.PlayerCustomize;
import org.macausmp.sportsday.customize.VictoryDance;
import org.macausmp.sportsday.gui.customize.GraffitiSprayGUI;
import org.macausmp.sportsday.gui.event.EventGUI;
import org.macausmp.sportsday.sport.Sport;
import org.macausmp.sportsday.training.SportsTrainingHandler;
import org.macausmp.sportsday.util.ItemUtil;
import org.macausmp.sportsday.util.KeyDataType;
import org.macausmp.sportsday.venue.Venue;

import java.util.*;
import java.util.function.Predicate;

/**
 * Represents a sporting event
 */
public abstract class SportingEvent implements ComponentLike, Listener {
    protected static final SportsDay PLUGIN = SportsDay.getInstance();
    public static final NamespacedKey LAST_EVENT_TIME = new NamespacedKey(PLUGIN, "last_event_time");
    public static final NamespacedKey GRAFFITI = new NamespacedKey(PLUGIN, "graffiti_frame");
    private final Sport sport;
    private final Venue venue;
    private final long startTime;
    private EventStatus status = EventStatus.UPCOMING;
    private boolean pause = false;
    private final Collection<ContestantData> contestants = new HashSet<>();
    private final List<ContestantData> leaderboard = new ArrayList<>();
    private final Set<BukkitTask> tasks = new HashSet<>();
    protected final Predicate<Player> predicate = p -> {
        if (!SportsDay.isContestant(p))
            return false;
        ContestantData data = SportsDay.getContestant(p.getUniqueId());
        return getContestants().contains(data) && !getLeaderboard().contains(data) && status != EventStatus.ENDED;
    };
    private VictoryDance victoryDance = null;
    private Musickit mvpAnthem = null;

    public SportingEvent(@NotNull Sport sport, @NotNull Venue venue, @Nullable PersistentDataContainer save) {
        this.sport = sport;
        this.venue = venue;
        this.startTime = System.currentTimeMillis();
        if (save == null) {
            contestants.addAll(SportsDay.getContestants());
        } else {
            List<String> list = Objects.requireNonNull(save.get(new NamespacedKey(PLUGIN, "contestants"),
                    PersistentDataType.LIST.listTypeFrom(PersistentDataType.STRING)));
            contestants.addAll(list.stream().map(uuid -> SportsDay.getContestant(UUID.fromString(uuid))).toList());
        }
        PLUGIN.getServer().getPluginManager().registerEvents(this, PLUGIN);
    }

    /**
     * Save the event to {@link PersistentDataContainer}
     *
     * @param data where the data will be written
     */
    public void save(@NotNull PersistentDataContainer data) {
        data.set(new NamespacedKey(PLUGIN, "sport"), KeyDataType.KEY_DATA_TYPE, sport.getKey());
        data.set(new NamespacedKey(PLUGIN, "venue"), PersistentDataType.STRING, getVenue().getUUID().toString());
        data.set(new NamespacedKey(PLUGIN, "contestants"),
                PersistentDataType.LIST.listTypeFrom(PersistentDataType.STRING),
                contestants.stream().map(d -> d.getUUID().toString()).toList());
    }

    /**
     * Get the event's sports.
     *
     * @return sports of event
     */
    public final Sport getSports() {
        return sport;
    }

    /**
     * Get the event's venue.
     *
     * @return venue of event
     */
    public Venue getVenue() {
        return venue;
    }

    /**
     * <p>Get the event's start time.
     *
     * <p>Generated by {@link System#currentTimeMillis}
     *
     * @return the start time of event
     */
    public final long getStartTime() {
        return startTime;
    }

    /**
     * Get the event's current status.
     *
     * @return the current status of event
     */
    public final EventStatus getStatus() {
        return pause ? EventStatus.PAUSED : status;
    }

    /**
     * Return {@code True} if event is paused.
     *
     * @return {@code True} if event is paused
     */
    public final boolean isPaused() {
        return pause;
    }

    /**
     * Gets a view of {@link ContestantData} of event.
     *
     * @return a view of {@link ContestantData} of event
     */
    public Collection<ContestantData> getContestants() {
        return contestants;
    }

    /**
     * Get the leaderboard of event.
     *
     * @return leaderboard of event
     */
    public List<ContestantData> getLeaderboard() {
        return leaderboard;
    }

    /**
     * Get the gui of event.
     *
     * @return gui of event
     */
    public abstract EventGUI<? extends SportingEvent> getEventGUI();

    @Override
    public @NotNull Component asComponent() {
        return sport.asComponent();
    }

    /**
     * Start the event.
     */
    public void start() {
        if (status == EventStatus.PROCESSING)
            return;
        SportsTrainingHandler.leaveAllSportsTraining();
        Bukkit.getOnlinePlayers().forEach(p -> {
            p.getPersistentDataContainer().set(LAST_EVENT_TIME, PersistentDataType.LONG, startTime);
            p.setRespawnLocation(getVenue().getLocation(), true);
            p.teleportAsync(getVenue().getLocation());
        });
        contestants.forEach(data -> {
            Player p = data.getPlayer();
            if (!SportsDay.REFEREES.hasPlayer(p))
                p.getInventory().clear();
            p.clearActivePotionEffects();
            p.setFireTicks(0);
            p.setFreezeTicks(0);
            p.setHealth(Objects.requireNonNull(p.getAttribute(Attribute.MAX_HEALTH)).getValue());
            p.setGameMode(GameMode.ADVENTURE);
            PlayerCustomize.suitUp(p);
            p.getInventory().setItem(4, ItemUtil.SPRAY);
        });
        Bukkit.broadcast(Component.translatable("event.broadcast.ready")
                .arguments(this, Component.text(3)).color(NamedTextColor.GREEN));
        Bukkit.broadcast(Component.translatable("sport.desc." + sport.getKey().getKey()));
        PLUGIN.getComponentLogger().info(Component.translatable("console.competition.coming").arguments(this));
        addTask(new BukkitRunnable() {
            int i = 3;

            @Override
            public void run() {
                if (i > 0 && i <= 3) {
                    Bukkit.getServer().sendTitlePart(TitlePart.TITLE, Component.text(i).color(NamedTextColor.YELLOW));
                    Bukkit.getServer().playSound(Sound.sound(Key.key("minecraft:entity.arrow.hit_player"),
                            Sound.Source.MASTER, 1f, 0.5f));
                }
                Bukkit.getServer().sendActionBar(Component.translatable("event.broadcast.start_countdown")
                        .arguments(Component.text(i)).color(NamedTextColor.GREEN));
                if (i-- == 0) {
                    status = EventStatus.PROCESSING;
                    onStart();
                    Bukkit.getServer().sendActionBar(Component.translatable("event.broadcast.start"));
                    Bukkit.getServer().playSound(Sound.sound(Key.key("minecraft:entity.arrow.hit_player"),
                            Sound.Source.MASTER, 1f, 1f));
                    cancel();
                }
            }
        }.runTaskTimer(PLUGIN, 0L, 20L));
    }

    /**
     * Pause the event.
     */
    public boolean pause(@NotNull CommandSender sender) {
        if (this instanceof TrackEvent) {
            sender.sendMessage(Component.translatable("command.competition.pause.failed").color(NamedTextColor.RED));
            return false;
        }
        if (pause) {
            sender.sendMessage(Component.translatable("command.competition.pause.failed").color(NamedTextColor.RED));
            return false;
        }
        pause = true;
        Bukkit.getServer().sendActionBar(Component.translatable("event.broadcast.pause"));
        sender.sendMessage(Component.translatable("command.competition.pause.success").color(NamedTextColor.YELLOW));
        return true;
    }

    /**
     * Unpause the event.
     */
    public boolean unpause(@NotNull CommandSender sender) {
        if (!pause) {
            sender.sendMessage(Component.translatable("command.competition.unpause.failed").color(NamedTextColor.RED));
            return false;
        }
        pause = false;
        Bukkit.getServer().sendActionBar(Component.translatable("event.broadcast.unpause"));
        sender.sendMessage(Component.translatable("command.competition.unpause.success").color(NamedTextColor.YELLOW));
        return true;
    }

    /**
     * Terminate the event.
     */
    public void terminate(@NotNull CommandSender sender) {
        if (status == EventStatus.ENDED)
            return;
        close();
        Bukkit.getServer().sendTitlePart(TitlePart.TITLE, Component.translatable("event.broadcast.terminate"));
        PLUGIN.getComponentLogger().info(Component.translatable("console.competition.terminate").arguments(this));
        sender.sendMessage(Component.translatable("command.competition.terminate.success").color(NamedTextColor.YELLOW));
    }

    /**
     * End the event.
     */
    protected void end() {
        if (status == EventStatus.ENDED)
            return;
        onEnd();
        status = EventStatus.ENDED;
        Bukkit.getServer().sendTitlePart(TitlePart.TITLE, Component.translatable("event.broadcast.end"));
        PLUGIN.getComponentLogger().info(Component.translatable("console.competition.end").arguments(this));
        contestants.forEach(data -> {
            Player p = data.getPlayer();
            p.getInventory().clear();
        });
        onClose();
        if (leaderboard.isEmpty()) {
            close();
            return;
        }
        OfflinePlayer mvp = leaderboard.getFirst().getOfflinePlayer();
        addTask(new BukkitRunnable() {
            @Override
            public void run() {
                if (!mvp.isOnline())
                    return;
                Player p = Objects.requireNonNull(mvp.getPlayer());
                victoryDance = PlayerCustomize.getVictoryDance(p);
                if (victoryDance != null)
                    victoryDance.play(p);
                mvpAnthem = PlayerCustomize.getMusickit(mvp.getPlayer());
                if (mvpAnthem != null) {
                    Bukkit.getServer().playSound(Sound.sound(mvpAnthem.key(), Sound.Source.MASTER, 1f, 1f));
                    Bukkit.getServer().sendActionBar(Component.translatable("event.broadcast.play_mvp_anthem")
                            .arguments(Component.text(p.getName()).color(NamedTextColor.YELLOW), mvpAnthem));
                }
            }
        }.runTaskLater(PLUGIN, 40L));
        addTask(new BukkitRunnable() {
            @Override
            public void run() {
                if (victoryDance != null)
                    victoryDance.stop(mvp.getUniqueId());
                close();
            }
        }.runTaskLater(PLUGIN, 200L));
    }

    protected void close() {
        if (status == EventStatus.CLOSED)
            return;
        if (status != EventStatus.ENDED)
            onClose();
        status = EventStatus.CLOSED;
        tasks.forEach(BukkitTask::cancel);
        getVenue().getLocation().getWorld().getEntitiesByClass(ItemFrame.class).stream()
                .filter(e -> e.getPersistentDataContainer().has(GRAFFITI))
                .forEach(ItemFrame::remove);
        Bukkit.getOnlinePlayers().forEach(p -> {
            p.getPersistentDataContainer().remove(LAST_EVENT_TIME);
            p.teleportAsync(getVenue().getLocation());
            p.setGameMode(GameMode.ADVENTURE);
        });
        SportsDay.getOnlineContestants().forEach(d -> {
            Player p = d.getPlayer();
            p.getInventory().clear();
            PlayerCustomize.suitUp(p);
            p.getInventory().setItem(0, ItemUtil.MENU);
            p.getInventory().setItem(4, ItemUtil.CUSTOMIZE);
        });
        HandlerList.unregisterAll(this);
        SportsDay.setCurrentEvent(null);
    }

    /**
     * Called when the event starts.
     *
     * @see #start()
     */
    protected abstract void onStart();

    /**
     * Called when the event ends.
     *
     * @see #end()
     */
    protected abstract void onEnd();

    /**
     * Called when the event closed.
     *
     * @see #close()
     */
    protected void onClose() {}

    /**
     * Called when a contestant unregistered during the event
     *
     * @param contestant who leaved the event
     */
    public void onLeave(ContestantData contestant) {
        contestants.remove(contestant);
        leaderboard.remove(contestant);
        Player p = contestant.getPlayer();
        if (p.isInsideVehicle())
            Objects.requireNonNull(p.getVehicle()).remove();
        p.clearActivePotionEffects();
        p.setFireTicks(0);
        p.setFreezeTicks(0);
        p.getInventory().clear();
        PlayerCustomize.suitUp(p);
        p.getInventory().setItem(0, ItemUtil.MENU);
        p.getInventory().setItem(4, ItemUtil.CUSTOMIZE);
        p.setRespawnLocation(getVenue().getLocation(), true);
        p.teleportAsync(getVenue().getLocation());
    }

    /**
     * <p>Add a {@link BukkitTask} to event.
     *
     * <p>When the event ends, all tasks added through this method will be automatically canceled.
     *
     * @param task {@link BukkitTask} to add
     */
    protected final BukkitTask addTask(BukkitTask task) {
        tasks.add(task);
        return task;
    }

    @EventHandler
    public void onSpray(@NotNull PlayerInteractEvent e) {
        Player p = e.getPlayer();
        if (!predicate.test(p) || p.getGameMode() == GameMode.SPECTATOR)
            return;
        if (e.getItem() != null && ItemUtil.equals(e.getItem(), ItemUtil.SPRAY)) {
            e.setCancelled(true);
            if (e.getAction().equals(Action.RIGHT_CLICK_AIR)) {
                new GraffitiSprayGUI(p).open(p);
                return;
            }
            if (!e.getAction().equals(Action.RIGHT_CLICK_BLOCK))
                return;
            if (p.getCooldown(ItemUtil.SPRAY.getType()) > 0 && !p.isOp()) {
                p.sendActionBar(Component.translatable("item.spray.cooldown")
                        .arguments(Component.text(p.getCooldown(ItemUtil.SPRAY.getType()) / 20f))
                        .color(NamedTextColor.YELLOW));
                return;
            }
            GraffitiSpray graffiti = PlayerCustomize.getGraffitiSpray(p);
            if (graffiti == null || Bukkit.getMap(graffiti.ordinal()) == null)
                return;
            Block b = p.getTargetBlockExact(4);
            BlockFace f = p.getTargetBlockFace(4);
            if (b == null || !b.getType().isOccluding() || f == null)
                return;
            Location loc = b.getLocation().add(f.getDirection());
            ItemStack map = new ItemStack(Material.FILLED_MAP);
            map.editMeta(MapMeta.class, meta -> meta.setMapView(Bukkit.getMap(graffiti.ordinal())));
            loc.getWorld().playSound(Sound.sound(Key.key("minecraft:use_spray"),
                    Sound.Source.MASTER, 1f, 1f), loc.x(), loc.y(), loc.z());
            new BukkitRunnable() {
                @Override
                public void run() {
                    if (!p.isOp())
                        p.setCooldown(ItemUtil.SPRAY.getType(), 600);
                    ItemFrame frame = loc.getWorld().spawn(loc, ItemFrame.class);
                    // Remove item frame that should not appear in an illegal position
                    if (!frame.getLocation().add(frame.getFacing().getOppositeFace().getDirection()).getBlock().getType().isOccluding()) {
                        frame.remove();
                        return;
                    }
                    frame.setVisible(false);
                    frame.setInvulnerable(true);
                    frame.setFixed(true);
                    frame.setItem(map, false);
                    frame.getPersistentDataContainer().set(GRAFFITI, PersistentDataType.BOOLEAN, true);
                }
            }.runTaskLater(PLUGIN, 30L);
        }
    }

    @EventHandler
    public void onChangeSpray(@NotNull PlayerInteractEntityEvent e) {
        Player p = e.getPlayer();
        if (!predicate.test(p) || p.getGameMode() == GameMode.SPECTATOR)
            return;
        ItemStack item = p.getInventory().getItemInMainHand();
        if (ItemUtil.equals(item, ItemUtil.SPRAY) && e.getRightClicked() instanceof ItemFrame frame) {
            if (!frame.getPersistentDataContainer().has(GRAFFITI))
                return;
            e.setCancelled(true);
            if (p.getCooldown(ItemUtil.SPRAY.getType()) > 0 && !p.isOp()) {
                p.sendActionBar(Component.translatable("item.spray.cooldown")
                        .arguments(Component.text(p.getCooldown(ItemUtil.SPRAY.getType()) / 20f))
                        .color(NamedTextColor.YELLOW));
                return;
            }
            GraffitiSpray graffiti = PlayerCustomize.getGraffitiSpray(p);
            if (graffiti == null || Bukkit.getMap(graffiti.ordinal()) == null)
                return;
            ItemStack map = new ItemStack(Material.FILLED_MAP);
            map.editMeta(MapMeta.class, meta -> meta.setMapView(Bukkit.getMap(graffiti.ordinal())));
            Location loc = frame.getLocation();
            loc.getWorld().playSound(Sound.sound(Key.key("minecraft:use_spray"),
                    Sound.Source.MASTER, 1f, 1f), loc.x(), loc.y(), loc.z());
            new BukkitRunnable() {
                @Override
                public void run() {
                    if (!p.isOp())
                        p.setCooldown(ItemUtil.SPRAY.getType(), 600);
                    frame.setItem(map, false);
                }
            }.runTaskLater(PLUGIN, 30L);
        }
    }
}
